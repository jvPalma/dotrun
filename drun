#!/usr/bin/env bash

# shellcheck disable=SC2155
# shellcheck disable=SC1091
# shellcheck disable=SC2016
# Strict error handling
set -euo pipefail

IFS=$'\n\t'

# Version
DRUN_VERSION="1.0.1"

# Configuration
DRUN_CONFIG="${DRUN_CONFIG:-$HOME/.config/dotrun}"
BIN_DIR="$DRUN_CONFIG/bin"
DOC_DIR="$DRUN_CONFIG/docs"
DOC_TOKEN="### DOC"
_default_editor="$(command -v code >/dev/null && echo "code" || echo "nano")"
EDITOR="${EDITOR:-$_default_editor}"

# Validate EDITOR environment variable
if [[ -n "$EDITOR" ]] && ! command -v "$EDITOR" >/dev/null 2>&1; then
  echo "Warning: EDITOR '$EDITOR' not found in PATH, falling back to $_default_editor" >&2
  EDITOR="$_default_editor"
fi

mkdir -p "$BIN_DIR"
mkdir -p "$DOC_DIR"

# Color functions
color_folder() {
  local level=$1
  case $level in
  0) echo -e "\033[1;34m" ;; # Bright Blue
  1) echo -e "\033[1;36m" ;; # Bright Cyan
  2) echo -e "\033[1;35m" ;; # Bright Magenta
  *) echo -e "\033[1;33m" ;; # Bright Yellow
  esac
}
color_script="\033[1;92m" # Bright Green
color_doc="\033[0;37m"    # Gray
color_reset="\033[0m"

# Input validation
validate_script_name() {
  local name="$1"
  if [[ -z "$name" ]]; then
    echo "Error: Script name cannot be empty" >&2
    return 1
  fi
  if [[ "$name" =~ [^a-zA-Z0-9_/-] ]]; then
    echo "Error: Script name contains invalid characters. Use only alphanumeric, underscore, dash, and forward slash." >&2
    return 1
  fi
}

# Check if required directories exist and are writable
check_prerequisites() {
  if [[ ! -d "$BIN_DIR" ]] && ! mkdir -p "$BIN_DIR" 2>/dev/null; then
    echo "Error: Cannot create or access BIN_DIR: $BIN_DIR" >&2
    exit 1
  fi
  if [[ ! -d "$DOC_DIR" ]] && ! mkdir -p "$DOC_DIR" 2>/dev/null; then
    echo "Error: Cannot create or access DOC_DIR: $DOC_DIR" >&2
    exit 1
  fi
}

# Helpers
LINT_HELPER="$DRUN_CONFIG/helpers/lint.sh"
ALIASES_HELPER="$DRUN_CONFIG/helpers/aliases.sh"
CONFIG_HELPER="$DRUN_CONFIG/helpers/config.sh"
# shellcheck disable=SC1090
[[ -f "$LINT_HELPER" ]] && source "$LINT_HELPER"
# shellcheck disable=SC1090
[[ -f "$ALIASES_HELPER" ]] && source "$ALIASES_HELPER"
# shellcheck disable=SC1090
[[ -f "$CONFIG_HELPER" ]] && source "$CONFIG_HELPER"

# Traverse bin directory and print scripts with doc in tree-style and colors
# list_scripts show_docs scope
#   show_docs: 0 = names only, 1 = include docs
#   scope:     optional sub-folder (e.g. "code/")
list_scripts() {
  local show_docs="$1"
  local scope="$2"
  local start_dir="$BIN_DIR/${scope%/}" # strip trailing /

  [[ ! -d "$start_dir" ]] && {
    echo "Error: No such folder: $scope" >&2
    return 1
  }

  # Check for circular symlinks in the directory
  if find "$start_dir" -type l -exec test ! -e {} \; -print 2>/dev/null | grep -q .; then
    echo "Warning: Broken symlinks found in $start_dir" >&2
  fi

  declare -A printed_folders=()

  _print_folder_chain() {
    local path="$1" indent=""
    [[ "$path" == "." || -z "$path" ]] && return
    local current=""
    IFS='/' read -ra parts <<<"$path"
    for part in "${parts[@]}"; do
      current="${current:+$current/}$part"
      if [[ -z "${printed_folders[$current]+x}" ]]; then
        echo -e "${indent}\033[1;33mðŸ“‚ $part${color_reset}"
        printed_folders["$current"]=1
      fi
      indent+="  "
    done
  }

  while IFS= read -r -d '' file; do
    # shellcheck disable=SC2295
    rel_path="${file#"$BIN_DIR"/}"
    script_name="$(basename "$rel_path" .sh)"
    folder_path="$(dirname "$rel_path")"

    _print_folder_chain "$folder_path"

    # indent scripts one level deeper than their folder depth
    local depth=0 indent=""
    [[ "$folder_path" != "." ]] && depth=$(awk -F'/' '{print NF}' <<<"$folder_path")
    for ((i = 0; i < depth; i++)); do indent+="  "; done

    echo -e "${indent}${color_script}${script_name}${color_reset}"
    if ((show_docs)); then
      awk "/^$DOC_TOKEN/ { p = !p; next } p { print \"${indent}  ${color_doc}\" \$0 \"$color_reset\" }" "$file"
    fi
  done < <(find "$start_dir" -type f -name "*.sh" -print0 | sort -z)
}

# Create script skeleton
create_script_skeleton() {
  local name="$1"
  local file="$BIN_DIR/$name.sh"
  local docFile="$DOC_DIR/$name.md"
  mkdir -p "$(dirname "$file")"
  mkdir -p "$(dirname "$docFile")"

  # Create documentation file
  local script_basename="$(basename "$name")"
  local doc_content
  doc_content="# $script_basename\n\nDescribe what this script does here.\n\n## Usage\n\n\`\`\`bash\n$ drun $name [args...]\n\`\`\`\n"
  echo -e "$doc_content" >"$docFile"

  # Create script file with skeleton
  cat >"$file" <<EOF
#!/usr/bin/env bash
$DOC_TOKEN
# $script_basename - describe what this script does
$DOC_TOKEN
set -euo pipefail

# source "$DRUN_CONFIG/helpers/pkg.sh"

main() {
  echo "Running $script_basename..."
}

main "\$@"
EOF
  chmod +x "$file"
}

# Search script by name regardless of path
find_script_file() {
  local query="$1"

  # 1) explicit sub-folder path?
  if [[ "$query" == */* ]]; then
    local exact="$BIN_DIR/$query.sh"
    if [[ -f "$exact" ]]; then
      # Check if file is executable
      if [[ ! -x "$exact" ]]; then
        echo "Error: Script '$exact' is not executable" >&2
        return 1
      fi
      # Check for circular symlinks
      if [[ -L "$exact" ]] && ! readlink -e "$exact" >/dev/null 2>&1; then
        echo "Error: Script '$exact' is a broken symlink" >&2
        return 1
      fi
      echo "$exact"
      return
    fi
  fi

  # 2) fallback: search anywhere for basename
  local base
  base="$(basename "$query").sh"
  local found_file
  found_file=$(find "$BIN_DIR" -type f -name "$base" 2>/dev/null | head -n 1)

  if [[ -n "$found_file" ]]; then
    # Check if file is executable
    if [[ ! -x "$found_file" ]]; then
      echo "Error: Script '$found_file' is not executable" >&2
      return 1
    fi
    # Check for circular symlinks
    if [[ -L "$found_file" ]] && ! readlink -e "$found_file" >/dev/null 2>&1; then
      echo "Error: Script '$found_file' is a broken symlink" >&2
      return 1
    fi
    echo "$found_file"
  fi
}

add_script() {
  local name="$1"
  validate_script_name "$name" || exit 1
  check_prerequisites

  local file="$BIN_DIR/$name.sh"
  if [[ ! -f "$file" ]]; then
    create_script_skeleton "$name"
    echo "Created new script: $file"
  fi

  # Validate editor before using
  if [[ -z "$EDITOR" ]] || ! command -v "$EDITOR" >/dev/null 2>&1; then
    echo "Error: No valid editor found. Please set EDITOR environment variable." >&2
    exit 1
  fi

  "$EDITOR" "$file"
  [[ $(type -t run_shell_lint) == "function" ]] && run_shell_lint "$file"
}

edit_script() {
  local file
  file=$(find_script_file "$1")
  if [[ -n "$file" ]]; then
    # Validate editor before using
    if [[ -z "$EDITOR" ]] || ! command -v "$EDITOR" >/dev/null 2>&1; then
      echo "Error: No valid editor found. Please set EDITOR environment variable." >&2
      exit 1
    fi

    "$EDITOR" "$file"
    [[ $(type -t run_shell_lint) == "function" ]] && run_shell_lint "$file"
  else
    echo "Error: Script '$1' not found" >&2
    echo "Use 'drun -l' to list available scripts" >&2
    exit 1
  fi
}

edit_docs() {
  local file
  file=$(find_script_file "$1")
  if [[ -n "$file" ]]; then
    # Validate editor before using
    if [[ -z "$EDITOR" ]] || ! command -v "$EDITOR" >/dev/null 2>&1; then
      echo "Error: No valid editor found. Please set EDITOR environment variable." >&2
      exit 1
    fi

    # Get relative path from bin directory and convert to doc path
    local rel_path="${file#"$BIN_DIR"/}"
    local doc_file="$DOC_DIR/$(basename "$rel_path" .sh).md"

    # Preserve folder structure: bin/ai/gpt.sh -> docs/ai/gpt.md
    if [[ "$rel_path" == */* ]]; then
      local folder_path="$(dirname "$rel_path")"
      doc_file="$DOC_DIR/$folder_path/$(basename "$rel_path" .sh).md"
    fi

    if [[ -f "$doc_file" ]]; then
      "$EDITOR" "$doc_file"
    else
      echo "Error: Documentation file '$doc_file' not found" >&2
      echo "Creating documentation file..." >&2
      mkdir -p "$(dirname "$doc_file")"

      # Create documentation with correct script name including folder
      local script_name="${rel_path%%.sh}"
      local doc_content
      doc_content="# $(basename "$script_name")\n\nDescribe what this script does here.\n\n## Usage\n\n\`\`\`bash\n$ drun $script_name [args...]\n\`\`\`\n"
      echo -e "$doc_content" >"$doc_file"

      "$EDITOR" "$doc_file"
    fi
  else
    echo "Error: Script '$1' not found" >&2
    exit 1
  fi
}

show_help() {
  local file
  file=$(find_script_file "$1")
  if [[ -z "$file" ]]; then
    echo "Error: Script '$1' not found" >&2
    exit 1
  fi
  awk "/^$DOC_TOKEN/ { p = !p; next } p" "$file"
}

show_docs() {
  local file
  file=$(find_script_file "$1")
  if [[ -z "$file" ]]; then
    echo "Error: Script '$1' not found" >&2
    exit 1
  fi

  # Get relative path from bin directory and convert to doc path
  local rel_path="${file#"$BIN_DIR"/}"
  local doc_file="$DOC_DIR/$(basename "$rel_path" .sh).md"

  # Preserve folder structure: bin/ai/gpt.sh -> docs/ai/gpt.md
  if [[ "$rel_path" == */* ]]; then
    local folder_path="$(dirname "$rel_path")"
    doc_file="$DOC_DIR/$folder_path/$(basename "$rel_path" .sh).md"
  fi

  if [[ -f "$doc_file" ]]; then
    if command -v glow >/dev/null 2>&1; then
      echo "â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€"
      glow "$doc_file"
    else
      echo "ðŸ“– (install 'glow' for better formatting)"
      echo "â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€"
      cat "$doc_file"
    fi
  else
    echo "ðŸ“– No markdown documentation found for '$1'" >&2
    echo "Showing inline help instead:" >&2
    echo "â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€"
    show_help "$1"
    echo ""
    echo "ðŸ’¡ Create full documentation with: drun edit:docs $1"
  fi
}

# Move/rename a script and its documentation
move_script() {
  local source="$1"
  local destination="$2"
  
  # Validate inputs
  validate_script_name "$source" || exit 1
  validate_script_name "$destination" || exit 1
  
  # Find source script file
  local source_file
  source_file=$(find_script_file "$source")
  if [[ -z "$source_file" ]]; then
    echo "Error: Source script '$source' not found" >&2
    echo "Use 'drun -l' to list available scripts" >&2
    exit 1
  fi
  
  # Get relative paths
  local source_rel="${source_file#"$BIN_DIR"/}"
  local source_name="$(basename "$source_rel" .sh)"
  local source_dir="$(dirname "$source_rel")"
  
  # Construct destination paths
  local dest_file="$BIN_DIR/$destination.sh"
  local dest_name="$(basename "$destination")"
  local dest_dir="$(dirname "$destination")"
  
  # Normalize directory paths
  [[ "$source_dir" == "." ]] && source_dir=""
  [[ "$dest_dir" == "." ]] && dest_dir=""
  
  # Check if destination already exists
  if [[ -f "$dest_file" ]]; then
    echo "Error: Destination script '$destination' already exists" >&2
    exit 1
  fi
  
  # Check for circular move (source and destination are the same)
  if [[ "$source_file" == "$dest_file" ]]; then
    echo "Error: Source and destination are the same" >&2
    exit 1
  fi
  
  # Check write permissions on destination directory
  local dest_parent_dir="$BIN_DIR"
  [[ -n "$dest_dir" ]] && dest_parent_dir="$BIN_DIR/$dest_dir"
  if [[ -d "$dest_parent_dir" ]] && [[ ! -w "$dest_parent_dir" ]]; then
    echo "Error: No write permission for destination directory: $dest_parent_dir" >&2
    exit 1
  fi
  
  # Create destination directories if needed
  if [[ -n "$dest_dir" ]]; then
    if ! mkdir -p "$BIN_DIR/$dest_dir" 2>/dev/null; then
      echo "Error: Failed to create destination directory: $BIN_DIR/$dest_dir" >&2
      exit 1
    fi
    if ! mkdir -p "$DOC_DIR/$dest_dir" 2>/dev/null; then
      echo "Error: Failed to create documentation directory: $DOC_DIR/$dest_dir" >&2
      exit 1
    fi
  fi
  
  # Move script file
  if ! mv "$source_file" "$dest_file" 2>/dev/null; then
    echo "Error: Failed to move script file" >&2
    exit 1
  fi
  echo "âœ“ Moved script: $source -> $destination"
  
  # Handle documentation file
  local source_doc="$DOC_DIR/$source_rel"
  source_doc="${source_doc%.sh}.md"
  local dest_doc="$DOC_DIR/$destination.md"
  
  if [[ -f "$source_doc" ]]; then
    # Ensure destination doc directory exists
    local dest_doc_dir="$(dirname "$dest_doc")"
    if [[ ! -d "$dest_doc_dir" ]]; then
      mkdir -p "$dest_doc_dir" 2>/dev/null || true
    fi
    
    if ! mv "$source_doc" "$dest_doc" 2>/dev/null; then
      echo "âš  Warning: Failed to move documentation file" >&2
    else
      echo "âœ“ Moved documentation: $(basename "$source_doc") -> $(basename "$dest_doc")"
      
      # Update documentation content to reflect new name if it changed
      if [[ "$source_name" != "$dest_name" ]]; then
        # Update title and usage examples in the doc file
        # Use temporary file to avoid issues with sed -i on some systems
        local temp_doc="$dest_doc.tmp"
        sed "s/# $source_name/# $dest_name/g" "$dest_doc" | sed "s|drun $source|drun $destination|g" > "$temp_doc"
        mv "$temp_doc" "$dest_doc"
        echo "âœ“ Updated documentation references"
      fi
    fi
  else
    echo "â„¹ No documentation file found for '$source'"
  fi
  
  # Update inline documentation in script if name changed
  if [[ "$source_name" != "$dest_name" ]]; then
    # Update script name references in DOC_TOKEN section
    local temp_script="$dest_file.tmp"
    sed "s/# $source_name -/# $dest_name -/g" "$dest_file" > "$temp_script"
    mv "$temp_script" "$dest_file"
    chmod +x "$dest_file"  # Ensure script remains executable
    echo "âœ“ Updated script inline documentation"
  fi
  
  # Clean up empty source directories (including parent directories)
  if [[ -n "$source_dir" ]]; then
    # Clean up bin directories
    local dir_to_check="$source_dir"
    while [[ -n "$dir_to_check" ]]; do
      if [[ -d "$BIN_DIR/$dir_to_check" && -z "$(ls -A "$BIN_DIR/$dir_to_check" 2>/dev/null)" ]]; then
        rmdir "$BIN_DIR/$dir_to_check" 2>/dev/null && echo "âœ“ Removed empty directory: bin/$dir_to_check"
      else
        break  # Directory not empty or doesn't exist, stop checking parents
      fi
      # Move to parent directory
      dir_to_check="$(dirname "$dir_to_check")"
      [[ "$dir_to_check" == "." ]] && break
    done
    
    # Clean up doc directories
    dir_to_check="$source_dir"
    while [[ -n "$dir_to_check" ]]; do
      if [[ -d "$DOC_DIR/$dir_to_check" && -z "$(ls -A "$DOC_DIR/$dir_to_check" 2>/dev/null)" ]]; then
        rmdir "$DOC_DIR/$dir_to_check" 2>/dev/null && echo "âœ“ Removed empty directory: docs/$dir_to_check"
      else
        break  # Directory not empty or doesn't exist, stop checking parents
      fi
      # Move to parent directory
      dir_to_check="$(dirname "$dir_to_check")"
      [[ "$dir_to_check" == "." ]] && break
    done
  fi
  
  echo "Successfully moved/renamed script: $source -> $destination"
  echo "Run with: drun $destination"
}

run_script() {
  local name="$1"
  shift
  local file
  file=$(find_script_file "$name")
  if [[ -z "$file" ]]; then
    echo "Error: Script '$name' not found" >&2
    echo "Use 'drun -l' to list available scripts" >&2
    exit 1
  fi
  "$file" "$@"
}

# Main command parser
case "${1:-}" in
-l | -L)
  show_docs=0
  [[ "$1" == "-L" ]] && show_docs=1
  scope="${2:-}" # optional second arg
  list_scripts "$show_docs" "$scope"
  ;;
add)
  [[ -z "${2:-}" ]] && {
    echo "Usage: drun add <name>"
    exit 1
  }
  add_script "$2"
  ;;
edit)
  [[ -z "${2:-}" ]] && {
    echo "Usage: drun edit <name>"
    exit 1
  }
  echo "Editing script: $2 ---- with editor: $EDITOR"
  edit_script "$2"
  ;;
edit:docs)
  [[ -z "${2:-}" ]] && {
    echo "Usage: drun edit:docs <name>"
    exit 1
  }
  edit_docs "$2"
  ;;
move | rename | mv)
  [[ -z "${2:-}" || -z "${3:-}" ]] && {
    echo "Usage: drun $1 <source> <destination>"
    echo "Examples:"
    echo "  drun move oldName newName        # Simple rename"
    echo "  drun move gitCmd git/gitCmd      # Move to folder"
    echo "  drun move folderA/cmd folderB/cmd # Move between folders"
    echo "  drun move oldName folder/newName # Rename and move"
    exit 1
  }
  move_script "$2" "$3"
  ;;
help)
  [[ -z "${2:-}" ]] && {
    echo "Usage: drun help <name>"
    exit 1
  }
  show_help "$2"
  ;;
docs | details)
  [[ -z "${2:-}" ]] && {
    echo "Usage: drun $1 <name>"
    exit 1
  }
  show_docs "$2"
  ;;
yadm-init)
  check_prerequisites
  if ! command -v yadm_init >/dev/null 2>&1; then
    echo "Error: Collections helper not available" >&2
    exit 1
  fi
  yadm_init
  ;;
import)
  [[ -z "${2:-}" ]] && {
    echo "Usage: drun import <source-url|path> [collection-name] [options]"
    echo "Options:"
    echo "  --preview           Show collection contents without importing"
    echo "  --pick <script>     Import only specified script (e.g., frontend/component)"
    echo "Examples:"
    echo "  drun import https://github.com/team/scripts.git --preview"
    echo "  drun import https://github.com/team/scripts.git"
    echo "  drun import https://github.com/team/scripts.git --pick frontend/build"
    echo "  drun import /path/to/local/collection team-tools"
    exit 1
  }
  check_prerequisites
  if ! command -v import_collection >/dev/null 2>&1; then
    echo "Error: Collections helper not available" >&2
    exit 1
  fi

  # Parse arguments
  source="$2"
  collection_name=""
  preview_mode=false
  pick_script=""

  # Process remaining arguments
  shift 2
  while [[ $# -gt 0 ]]; do
    case "$1" in
    --preview)
      preview_mode=true
      shift
      ;;
    --pick)
      [[ -z "${2:-}" ]] && {
        echo "Error: --pick requires a script name (e.g., frontend/component)" >&2
        exit 1
      }
      pick_script="$2"
      shift 2
      ;;
    *)
      # Assume it's the collection name if no flags
      if [[ ! "$1" =~ ^-- ]]; then
        collection_name="$1"
      else
        echo "Error: Unknown option: $1" >&2
        exit 1
      fi
      shift
      ;;
    esac
  done

  if $preview_mode; then
    preview_collection "$source"
  elif [[ -n "$pick_script" ]]; then
    import_single_script "$source" "$pick_script" "$collection_name"
  else
    import_collection "$source" "$collection_name"
  fi
  ;;
export)
  [[ -z "${2:-}" ]] && {
    echo "Usage: drun export <collection-name> <export-path> [--git]"
    echo "Examples:"
    echo "  drun export my-scripts ./my-scripts-export"
    echo "  drun export team-tools /tmp/export --git"
    exit 1
  }
  [[ -z "${3:-}" ]] && {
    echo "Error: Export path required"
    echo "Usage: drun export <collection-name> <export-path> [--git]"
    exit 1
  }
  check_prerequisites
  if ! command -v export_collection >/dev/null 2>&1; then
    echo "Error: Collections helper not available" >&2
    exit 1
  fi
  include_git="false"
  if [[ "${4:-}" == "--git" ]]; then
    include_git="true"
  fi
  export_collection "$2" "$3" "$include_git"
  ;;
collections)
  check_prerequisites
  if ! command -v list_collections >/dev/null 2>&1; then
    echo "Error: Collections helper not available" >&2
    exit 1
  fi
  case "${2:-list}" in
  list | -l)
    list_collections
    ;;
  list:details | -L)
    list_collections true
    ;;
  remove)
    [[ -z "${3:-}" ]] && {
      echo "Usage: drun collections remove <collection-name> [--force]"
      exit 1
    }
    force="false"
    if [[ "${4:-}" == "--force" ]]; then
      force="true"
    fi
    remove_collection "$3" "$force"
    ;;
  *)
    echo "Usage: drun collections <command>"
    echo "Commands:"
    echo "  list              List installed collections"
    echo "  list:details      List collections with detailed information"
    echo "  remove <name>     Remove a collection"
    echo "  remove <name> --force  Remove without confirmation"
    ;;
  esac
  ;;
team)
  case "${2:-}" in
  init)
    [[ -z "${3:-}" ]] && {
      echo "Usage: drun team init <team-repo-url> [team-name]"
      echo "Example: drun team init git@github.com:company/dotrun-scripts.git company"
      exit 1
    }
    check_prerequisites
    if ! command -v import_collection >/dev/null 2>&1; then
      echo "Error: Collections helper not available" >&2
      exit 1
    fi
    team_name="${4:-team}"
    echo "Setting up team collection: $team_name"
    import_collection "$3" "$team_name"
    ;;
  sync)
    echo "Team sync functionality coming soon..."
    echo "For now, use: drun collections remove <team-name> && drun import <team-repo-url> <team-name>"
    ;;
  *)
    echo "Usage: drun team <command>"
    echo "Commands:"
    echo "  init <repo-url> [name]  Setup team collection from repository"
    echo "  sync                    Sync team collections (planned)"
    echo
    echo "Examples:"
    echo "  drun team init git@github.com:company/scripts.git company"
    echo "  drun team init https://github.com/team/dotrun-tools.git dev-tools"
    ;;
  esac
  ;;
aliases)
  check_prerequisites
  if [[ $(type -t aliases_init) != "function" ]]; then
    echo "Error: Aliases helper not available" >&2
    exit 1
  fi
  case "${2:-}" in
  init)
    aliases_init
    ;;
  add)
    [[ -z "${3:-}" || -z "${4:-}" ]] && {
      echo "Usage: drun aliases add <name> <command> [--category <category>]"
      echo "Examples:"
      echo "  drun aliases add ll 'ls -la'"
      echo "  drun aliases add gs 'git status' --category git"
      echo "  drun aliases add dc 'docker-compose' --category docker"
      exit 1
    }
    name="$3"
    command="$4"
    category=""
    # Check for --category flag
    if [[ "${5:-}" == "--category" && -n "${6:-}" ]]; then
      category="$6"
    fi
    aliases_add "$name" "$command" "$category"
    ;;
  list)
    show_categories="false"
    filter_category=""
    # Check for flags
    if [[ "${3:-}" == "--categories" ]]; then
      show_categories="true"
    elif [[ "${3:-}" == "--category" && -n "${4:-}" ]]; then
      filter_category="$4"
    fi
    aliases_list "$show_categories" "$filter_category"
    ;;
  edit)
    [[ -z "${3:-}" ]] && {
      echo "Usage: drun aliases edit <name>"
      exit 1
    }
    aliases_edit "$3"
    ;;
  remove | rm)
    [[ -z "${3:-}" ]] && {
      echo "Usage: drun aliases remove <name>"
      exit 1
    }
    aliases_remove "$3"
    ;;
  reload)
    aliases_reload
    ;;
  *)
    echo "Usage: drun aliases <command>"
    echo "Commands:"
    echo "  init                          Initialize aliases system"
    echo "  add <name> <command>          Add new alias"
    echo "  add <name> <cmd> --category <cat>  Add alias to specific category"
    echo "  list                          List all aliases"
    echo "  list --categories             List all aliases with category info"
    echo "  list --category <name>        List aliases in specific category"
    echo "  edit <name>                   Edit existing alias"
    echo "  remove <name>                 Remove alias (alias: rm)"
    echo "  reload                        Reload aliases in current shell"
    echo
    echo "Examples:"
    echo "  drun aliases init"
    echo "  drun aliases add ll 'ls -la'"
    echo "  drun aliases add gs 'git status' --category git"
    echo "  drun aliases list --category git"
    echo "  drun aliases edit ll"
    echo "  drun aliases remove gs"
    echo "  drun aliases reload"
    ;;
  esac
  ;;
config)
  check_prerequisites
  if [[ $(type -t config_init) != "function" ]]; then
    echo "Error: Config helper not available" >&2
    exit 1
  fi
  case "${2:-}" in
  init)
    config_init
    ;;
  set)
    [[ -z "${3:-}" || -z "${4:-}" ]] && {
      echo "Usage: drun config set <key> <value> [--category <category>] [--secure]"
      echo "Examples:"
      echo "  drun config set API_KEY abc123"
      echo "  drun config set DB_HOST localhost --category dev"
      echo "  drun config set SECRET_TOKEN xyz789 --secure"
      echo "  drun config set API_URL https://api.example.com --category api"
      exit 1
    }
    key="$3"
    value="$4"
    category=""
    secure="false"
    # Check for flags
    shift 4
    while [[ $# -gt 0 ]]; do
      case "$1" in
      --category)
        [[ -z "${2:-}" ]] && {
          echo "Error: --category requires a category name" >&2
          exit 1
        }
        category="$2"
        shift 2
        ;;
      --secure)
        secure="true"
        shift
        ;;
      *)
        echo "Error: Unknown option: $1" >&2
        exit 1
        ;;
      esac
    done
    config_set "$key" "$value" "$category" "$secure"
    ;;
  get)
    [[ -z "${3:-}" ]] && {
      echo "Usage: drun config get <key> [--show-value]"
      echo "Examples:"
      echo "  drun config get API_KEY"
      echo "  drun config get SECRET_TOKEN --show-value  # Show actual value for secure keys"
      exit 1
    }
    key="$3"
    show_masked="false"
    if [[ "${4:-}" == "--show-value" ]]; then
      show_masked="true"
    fi
    config_get "$key" "$show_masked"
    ;;
  list)
    show_categories="false"
    filter_category=""
    show_values="true"
    # Check for flags
    shift 2
    while [[ $# -gt 0 ]]; do
      case "$1" in
      --categories)
        show_categories="true"
        shift
        ;;
      --category)
        [[ -z "${2:-}" ]] && {
          echo "Error: --category requires a category name" >&2
          exit 1
        }
        filter_category="$2"
        shift 2
        ;;
      --keys-only)
        show_values="false"
        shift
        ;;
      *)
        echo "Error: Unknown option: $1" >&2
        exit 1
        ;;
      esac
    done
    config_list "$show_categories" "$filter_category" "$show_values"
    ;;
  edit)
    [[ -z "${3:-}" ]] && {
      echo "Usage: drun config edit <key>"
      echo "Example: drun config edit API_KEY"
      exit 1
    }
    config_edit "$3"
    ;;
  unset | remove | rm)
    [[ -z "${3:-}" ]] && {
      echo "Usage: drun config unset <key>"
      echo "Example: drun config unset API_KEY"
      exit 1
    }
    config_unset "$3"
    ;;
  reload)
    config_reload
    ;;
  *)
    echo "Usage: drun config <command>"
    echo "Commands:"
    echo "  init                          Initialize configuration system"
    echo "  set <key> <value>             Set configuration value"
    echo "  set <key> <val> --category <cat>  Set config in specific category"
    echo "  set <key> <val> --secure      Mark as secure/sensitive"
    echo "  get <key>                     Get configuration value (masked if secure)"
    echo "  get <key> --show-value        Get actual value (even if secure)"
    echo "  list                          List all configuration"
    echo "  list --categories             List all config with category info"
    echo "  list --category <name>        List config in specific category"
    echo "  list --keys-only              List only keys (no values)"
    echo "  edit <key>                    Edit existing configuration"
    echo "  unset <key>                   Remove configuration (aliases: remove, rm)"
    echo "  reload                        Reload config in current shell"
    echo
    echo "Examples:"
    echo "  drun config init"
    echo "  drun config set API_KEY abc123"
    echo "  drun config set DB_HOST localhost --category dev"
    echo "  drun config set SECRET_TOKEN xyz789 --secure"
    echo "  drun config get API_KEY"
    echo "  drun config list --category api"
    echo "  drun config edit API_KEY"
    echo "  drun config unset API_KEY"
    echo "  drun config reload"
    ;;
  esac
  ;;
-v | --version | version)
  echo "drun version $DRUN_VERSION"
  exit 0
  ;;
"" | -h | --help)
  echo "drun <command> [args...]"
  echo
  echo "Commands"
  echo "  -l                  List all scripts (names only)"
  echo "  -L                  List scripts with docs, optionally scoped"
  echo "  -l/L [folder/]      List scripts within the scoped folder"
  echo "  add <name>          Create and open <name>.sh in editor"
  echo "  edit <name>         Open existing script in editor"
  echo "  edit:docs <name>    Edit documentation for <name>"
  echo "  move <src> <dst>    Move/rename script (aliases: rename, mv)"
  echo "  help <name>         Show embedded docs for <name>"
  echo "  docs <name>         Show full markdown documentation (with glow)"
  echo "  details <name>      Alias for 'docs' command"
  echo "  <name> [argsâ€¦]      Execute script <name> from anywhere"
  echo
  echo "Aliases Management"
  echo "  aliases init        Initialize aliases system with shell integration"
  echo "  aliases add <name> <command>  Add new alias"
  echo "  aliases list        List all aliases"
  echo "  aliases edit <name> Edit existing alias"
  echo "  aliases remove <name> Remove alias"
  echo "  aliases reload      Reload aliases in current shell"
  echo
  echo "Configuration Management"
  echo "  config init         Initialize configuration system with shell integration"
  echo "  config set <key> <value>  Set global configuration variable"
  echo "  config get <key>    Get configuration value (masked if secure)"
  echo "  config list         List all configuration variables"
  echo "  config edit <key>   Edit existing configuration"
  echo "  config unset <key>  Remove configuration variable"
  echo "  config reload       Reload config variables in current shell"
  echo
  echo "Integration & Collections"
  echo "  yadm-init           Setup DotRun to work with existing yadm repository"
  echo "  import <url|path>   Import script collection from git repo or local path"
  echo "    --preview         Show collection contents without importing"
  echo "    --pick <script>   Import only specified script (e.g., frontend/build)"
  echo "  export <name> <path> Export collection to directory [--git]"
  echo "  collections <cmd>   Manage installed collections (list, remove)"
  echo "  team <cmd>          Team collaboration commands (init, sync)"
  echo
  echo "Environment Variables"
  echo "  DRUN_CONFIG         Override root (default \$HOME/.config/dotrun)"
  echo "  EDITOR              Command to open editor (default: auto-detect)"
  echo
  echo "Examples"
  echo "  drun add myScript              # Create new script"
  echo "  drun move oldName newName      # Rename script"
  echo "  drun mv script tools/script    # Move to folder"
  echo "  drun yadm-init                 # Setup with existing yadm dotfiles"
  echo "  drun import https://github.com/team/scripts.git --preview"
  echo "  drun import https://github.com/team/scripts.git company"
  echo "  drun import https://github.com/team/scripts.git --pick frontend/build"
  echo "  drun team init git@github.com:company/tools.git"
  echo "  drun collections list:details"
  echo "  drun aliases init                      # Setup aliases system"
  echo "  drun aliases add ll 'ls -la'           # Add simple alias"
  echo "  drun aliases add gs 'git status' --category git  # Add categorized alias"
  echo "  drun config init                       # Setup config system"
  echo "  drun config set API_KEY abc123         # Set API key"
  echo "  drun config set DB_HOST localhost --category dev  # Set categorized config"
  echo "  drun config set SECRET_TOKEN xyz789 --secure      # Set secure config"
  echo
  echo "Note: drun auto-runs ShellCheck after add/edit if available"
  echo "      'glow' is recommended for beautiful markdown rendering"
  exit 0
  ;;
*)
  if [[ -n "${1:-}" ]]; then
    run_script "$@"
  else
    echo "Error: No command provided" >&2
    echo "Run 'drun --help' for usage information" >&2
    exit 1
  fi
  ;;
esac
