#!/usr/bin/env bash

# shellcheck disable=SC2155
# shellcheck disable=SC1091
# shellcheck disable=SC2016
# Strict error handling
set -euo pipefail

IFS=$'\n\t'

# Configuration
DRUN_CONFIG="${DRUN_CONFIG:-$HOME/.config/dotrun}"
BIN_DIR="$DRUN_CONFIG/bin"
DOC_DIR="$DRUN_CONFIG/docs"
DOC_TOKEN="### DOC"
_default_editor="$(command -v code >/dev/null && echo "code" || echo "nano")"
EDITOR="${EDITOR:-$_default_editor}"

# Validate EDITOR environment variable
if [[ -n "$EDITOR" ]] && ! command -v "$EDITOR" >/dev/null 2>&1; then
  echo "Warning: EDITOR '$EDITOR' not found in PATH, falling back to $_default_editor" >&2
  EDITOR="$_default_editor"
fi

mkdir -p "$BIN_DIR"
mkdir -p "$DOC_DIR"

# Color functions
color_folder() {
  local level=$1
  case $level in
  0) echo -e "\033[1;34m" ;; # Bright Blue
  1) echo -e "\033[1;36m" ;; # Bright Cyan
  2) echo -e "\033[1;35m" ;; # Bright Magenta
  *) echo -e "\033[1;33m" ;; # Bright Yellow
  esac
}
color_script="\033[1;92m" # Bright Green
color_doc="\033[0;37m"    # Gray
color_reset="\033[0m"

# Input validation
validate_script_name() {
  local name="$1"
  if [[ -z "$name" ]]; then
    echo "Error: Script name cannot be empty" >&2
    return 1
  fi
  if [[ "$name" =~ [^a-zA-Z0-9_/-] ]]; then
    echo "Error: Script name contains invalid characters. Use only alphanumeric, underscore, dash, and forward slash." >&2
    return 1
  fi
}

# Check if required directories exist and are writable
check_prerequisites() {
  if [[ ! -d "$BIN_DIR" ]] && ! mkdir -p "$BIN_DIR" 2>/dev/null; then
    echo "Error: Cannot create or access BIN_DIR: $BIN_DIR" >&2
    exit 1
  fi
  if [[ ! -d "$DOC_DIR" ]] && ! mkdir -p "$DOC_DIR" 2>/dev/null; then
    echo "Error: Cannot create or access DOC_DIR: $DOC_DIR" >&2
    exit 1
  fi
}

# Helpers
LINT_HELPER="$DRUN_CONFIG/helpers/lint.sh"
# shellcheck disable=SC1090
[[ -f "$LINT_HELPER" ]] && source "$LINT_HELPER"

# Traverse bin directory and print scripts with doc in tree-style and colors
# list_scripts show_docs scope
#   show_docs: 0 = names only, 1 = include docs
#   scope:     optional sub-folder (e.g. "code/")
list_scripts() {
  local show_docs="$1"
  local scope="$2"
  local start_dir="$BIN_DIR/${scope%/}" # strip trailing /

  [[ ! -d "$start_dir" ]] && {
    echo "Error: No such folder: $scope" >&2
    return 1
  }
  
  # Check for circular symlinks in the directory
  if find "$start_dir" -type l -exec test ! -e {} \; -print 2>/dev/null | grep -q .; then
    echo "Warning: Broken symlinks found in $start_dir" >&2
  fi

  declare -A printed_folders=()

  _print_folder_chain() {
    local path="$1" indent=""
    [[ "$path" == "." || -z "$path" ]] && return
    local current=""
    IFS='/' read -ra parts <<<"$path"
    for part in "${parts[@]}"; do
      current="${current:+$current/}$part"
      if [[ -z "${printed_folders[$current]+x}" ]]; then
        echo -e "${indent}\033[1;33mðŸ“‚ $part${color_reset}"
        printed_folders["$current"]=1
      fi
      indent+="  "
    done
  }

  while IFS= read -r -d '' file; do
    # shellcheck disable=SC2295
    rel_path="${file#"$BIN_DIR"/}"
    script_name="$(basename "$rel_path" .sh)"
    folder_path="$(dirname "$rel_path")"

    _print_folder_chain "$folder_path"

    # indent scripts one level deeper than their folder depth
    local depth=0 indent=""
    [[ "$folder_path" != "." ]] && depth=$(awk -F'/' '{print NF}' <<<"$folder_path")
    for ((i = 0; i < depth; i++)); do indent+="  "; done

    echo -e "${indent}${color_script}${script_name}${color_reset}"
    if ((show_docs)); then
      awk "/^$DOC_TOKEN/ { p = !p; next } p { print \"${indent}  ${color_doc}\" \$0 \"$color_reset\" }" "$file"
    fi
  done < <(find "$start_dir" -type f -name "*.sh" -print0 | sort -z)
}

# Create script skeleton
create_script_skeleton() {
  local name="$1"
  local file="$BIN_DIR/$name.sh"
  local docFile="$DOC_DIR/$name.md"
  mkdir -p "$(dirname "$file")"
  mkdir -p "$(dirname "$docFile")"

  # Create documentation file
  local script_basename="$(basename "$name")"
  local doc_content
  doc_content="# $script_basename\n\nDescribe what this script does here.\n\n## Usage\n\n\`\`\`bash\n$ drun $name [args...]\n\`\`\`\n"
  echo -e "$doc_content" >"$docFile"

  # Create script file with skeleton
  cat >"$file" <<EOF
#!/usr/bin/env bash
$DOC_TOKEN
# $script_basename - describe what this script does
$DOC_TOKEN
set -euo pipefail

# source "$DRUN_CONFIG/helpers/pkg.sh"

main() {
  echo "Running $script_basename..."
}

main "\$@"
EOF
  chmod +x "$file"
}

# Search script by name regardless of path
find_script_file() {
  local query="$1"

  # 1) explicit sub-folder path?
  if [[ "$query" == */* ]]; then
    local exact="$BIN_DIR/$query.sh"
    if [[ -f "$exact" ]]; then
      # Check if file is executable
      if [[ ! -x "$exact" ]]; then
        echo "Error: Script '$exact' is not executable" >&2
        return 1
      fi
      # Check for circular symlinks
      if [[ -L "$exact" ]] && ! readlink -e "$exact" >/dev/null 2>&1; then
        echo "Error: Script '$exact' is a broken symlink" >&2
        return 1
      fi
      echo "$exact"
      return
    fi
  fi

  # 2) fallback: search anywhere for basename
  local base
  base="$(basename "$query").sh"
  local found_file
  found_file=$(find "$BIN_DIR" -type f -name "$base" 2>/dev/null | head -n 1)
  
  if [[ -n "$found_file" ]]; then
    # Check if file is executable
    if [[ ! -x "$found_file" ]]; then
      echo "Error: Script '$found_file' is not executable" >&2
      return 1
    fi
    # Check for circular symlinks
    if [[ -L "$found_file" ]] && ! readlink -e "$found_file" >/dev/null 2>&1; then
      echo "Error: Script '$found_file' is a broken symlink" >&2
      return 1
    fi
    echo "$found_file"
  fi
}

add_script() {
  local name="$1"
  validate_script_name "$name" || exit 1
  check_prerequisites

  local file="$BIN_DIR/$name.sh"
  if [[ ! -f "$file" ]]; then
    create_script_skeleton "$name"
    echo "Created new script: $file"
  fi
  
  # Validate editor before using
  if [[ -z "$EDITOR" ]] || ! command -v "$EDITOR" >/dev/null 2>&1; then
    echo "Error: No valid editor found. Please set EDITOR environment variable." >&2
    exit 1
  fi
  
  "$EDITOR" "$file"
  [[ $(type -t run_shell_lint) == "function" ]] && run_shell_lint "$file"
}

edit_script() {
  local file
  file=$(find_script_file "$1")
  if [[ -n "$file" ]]; then
    # Validate editor before using
    if [[ -z "$EDITOR" ]] || ! command -v "$EDITOR" >/dev/null 2>&1; then
      echo "Error: No valid editor found. Please set EDITOR environment variable." >&2
      exit 1
    fi
    
    "$EDITOR" "$file"
    [[ $(type -t run_shell_lint) == "function" ]] && run_shell_lint "$file"
  else
    echo "Error: Script '$1' not found" >&2
    echo "Use 'drun -l' to list available scripts" >&2
    exit 1
  fi
}

edit_docs() {
  local file
  file=$(find_script_file "$1")
  if [[ -n "$file" ]]; then
    # Validate editor before using
    if [[ -z "$EDITOR" ]] || ! command -v "$EDITOR" >/dev/null 2>&1; then
      echo "Error: No valid editor found. Please set EDITOR environment variable." >&2
      exit 1
    fi
    
    # Get relative path from bin directory and convert to doc path
    local rel_path="${file#"$BIN_DIR"/}"
    local doc_file="$DOC_DIR/$(basename "$rel_path" .sh).md"

    # Preserve folder structure: bin/ai/gpt.sh -> docs/ai/gpt.md
    if [[ "$rel_path" == */* ]]; then
      local folder_path="$(dirname "$rel_path")"
      doc_file="$DOC_DIR/$folder_path/$(basename "$rel_path" .sh).md"
    fi

    if [[ -f "$doc_file" ]]; then
      "$EDITOR" "$doc_file"
    else
      echo "Error: Documentation file '$doc_file' not found" >&2
      echo "Creating documentation file..." >&2
      mkdir -p "$(dirname "$doc_file")"

      # Create documentation with correct script name including folder
      local script_name="${rel_path%%.sh}"
      local doc_content
      doc_content="# $(basename "$script_name")\n\nDescribe what this script does here.\n\n## Usage\n\n\`\`\`bash\n$ drun $script_name [args...]\n\`\`\`\n"
      echo -e "$doc_content" >"$doc_file"

      "$EDITOR" "$doc_file"
    fi
  else
    echo "Error: Script '$1' not found" >&2
    exit 1
  fi
}

show_help() {
  local file
  file=$(find_script_file "$1")
  if [[ -z "$file" ]]; then
    echo "Error: Script '$1' not found" >&2
    exit 1
  fi
  awk "/^$DOC_TOKEN/ { p = !p; next } p" "$file"
}

show_docs() {
  local file
  file=$(find_script_file "$1")
  if [[ -z "$file" ]]; then
    echo "Error: Script '$1' not found" >&2
    exit 1
  fi

  # Get relative path from bin directory and convert to doc path
  local rel_path="${file#"$BIN_DIR"/}"
  local doc_file="$DOC_DIR/$(basename "$rel_path" .sh).md"

  # Preserve folder structure: bin/ai/gpt.sh -> docs/ai/gpt.md
  if [[ "$rel_path" == */* ]]; then
    local folder_path="$(dirname "$rel_path")"
    doc_file="$DOC_DIR/$folder_path/$(basename "$rel_path" .sh).md"
  fi

  if [[ -f "$doc_file" ]]; then
    if command -v glow >/dev/null 2>&1; then
      echo "â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€"
      glow "$doc_file"
    else
      echo "ðŸ“– (install 'glow' for better formatting)"
      echo "â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€"
      cat "$doc_file"
    fi
  else
    echo "ðŸ“– No markdown documentation found for '$1'" >&2
    echo "Showing inline help instead:" >&2
    echo "â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€"
    show_help "$1"
    echo ""
    echo "ðŸ’¡ Create full documentation with: drun edit:docs $1"
  fi
}

run_script() {
  local name="$1"
  shift
  local file
  file=$(find_script_file "$name")
  if [[ -z "$file" ]]; then
    echo "Error: Script '$name' not found" >&2
    echo "Use 'drun -l' to list available scripts" >&2
    exit 1
  fi
  "$file" "$@"
}

# Main command parser
case "${1:-}" in
-l | -L)
  show_docs=0
  [[ "$1" == "-L" ]] && show_docs=1
  scope="${2:-}" # optional second arg
  list_scripts "$show_docs" "$scope"
  ;;
add)
  [[ -z "${2:-}" ]] && {
    echo "Usage: drun add <name>"
    exit 1
  }
  add_script "$2"
  ;;
edit)
  [[ -z "${2:-}" ]] && {
    echo "Usage: drun edit <name>"
    exit 1
  }
  echo "Editing script: $2 ---- with editor: $EDITOR"
  edit_script "$2"
  ;;
edit:docs)
  [[ -z "${2:-}" ]] && {
    echo "Usage: drun edit:docs <name>"
    exit 1
  }
  edit_docs "$2"
  ;;
help)
  [[ -z "${2:-}" ]] && {
    echo "Usage: drun help <name>"
    exit 1
  }
  show_help "$2"
  ;;
docs | details)
  [[ -z "${2:-}" ]] && {
    echo "Usage: drun $1 <name>"
    exit 1
  }
  show_docs "$2"
  ;;
"" | -h | --help)
  echo "drun <command> [args...]"
  echo
  echo "Commands"
  echo "  -l                  List all scripts (names only)"
  echo "  -L                  List scripts with docs, optionally scoped"
  echo "  -l/L [folder/]      List scripts within the scoped folder"
  echo "  add <name>          Create and open <name>.sh in editor"
  echo "  edit <name>         Open existing script in editor"
  echo "  edit:docs <name>    Edit documentation for <name>"
  echo "  help <name>         Show embedded docs for <name>"
  echo "  docs <name>         Show full markdown documentation (with glow)"
  echo "  details <name>      Alias for 'docs' command"
  echo "  <name> [argsâ€¦]      Execute script <name> from anywhere"
  echo
  echo "Environment Variables"
  echo "  DRUN_CONFIG         Override root (default \$HOME/.config/dotrun)"
  echo "  EDITOR              Command to open editor (default: auto-detect)"
  echo
  echo "Note: drun auto-runs ShellCheck after add/edit if available"
  echo "      'glow' is recommended for beautiful markdown rendering"
  exit 0
  ;;
*)
  if [[ -n "${1:-}" ]]; then
    run_script "$@"
  else
    echo "Error: No command provided" >&2
    echo "Run 'drun --help' for usage information" >&2
    exit 1
  fi
  ;;
esac
